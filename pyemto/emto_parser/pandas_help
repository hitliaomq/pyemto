###########################################################################################################################
# HTML tables in ipython:
pd.set_option('notebook_repr_html',True)
###########################################################################################################################

###########################################################################################################################
# Select certain columns
data_frame[['SWS','Etot']]
###########################################################################################################################

###########################################################################################################################
# Slice through a range of rows and columns:
slice3 = thenames.ix[5:12,['year','sex']]
###########################################################################################################################

###########################################################################################################################
# Select rows based on some criterion:
# The old way:
--------------
bcc_mask = df.main_df.loc[idx[:],idx['Struc']]=='bcc'
bcc_df = df.main_df.loc[idx[bcc_mask],idx[:]]

# The new way:
--------------
# Exact match:
test.EN[test.EN['str']=='bcc']
# Wildcard:
test.EN[test.EN['str'].str.contains('hcp')]
###########################################################################################################################

###########################################################################################################################
# Select rows based on multiple criteria:
test.EN.loc[(test.EN['str']=='bcc') & (test.EN['SWS']==2.55)]
###########################################################################################################################

###########################################################################################################################
# Slicing pivot_tables:
###########################################################################################################################

###########################################################################################################################

###########################################################################################################################

###########################################################################################################################

###########################################################################################################################

###########################################################################################################################

###########################################################################################################################

